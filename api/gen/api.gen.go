// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for PlayerRole.
const (
	PlayerRoleC  PlayerRole = "C"
	PlayerRolePF PlayerRole = "PF"
	PlayerRolePG PlayerRole = "PG"
	PlayerRoleSF PlayerRole = "SF"
	PlayerRoleSG PlayerRole = "SG"
)

// Defines values for PlayerCreateRole.
const (
	PlayerCreateRoleC  PlayerCreateRole = "C"
	PlayerCreateRolePF PlayerCreateRole = "PF"
	PlayerCreateRolePG PlayerCreateRole = "PG"
	PlayerCreateRoleSF PlayerCreateRole = "SF"
	PlayerCreateRoleSG PlayerCreateRole = "SG"
)

// Defines values for PlayerUpdateRole.
const (
	C  PlayerUpdateRole = "C"
	PF PlayerUpdateRole = "PF"
	PG PlayerUpdateRole = "PG"
	SF PlayerUpdateRole = "SF"
	SG PlayerUpdateRole = "SG"
)

// Player defines model for Player.
type Player struct {
	Age         int    `json:"age"`
	Citizenship string `json:"citizenship"`

	// Height Height in millimeters (e.g., 2060 mm = 2.06 m)
	Height  int        `json:"height"`
	Id      int64      `json:"id"`
	Name    string     `json:"name"`
	Role    PlayerRole `json:"role"`
	Surname string     `json:"surname"`
	TeamId  int64      `json:"teamId"`

	// Weight Weight in grams (e.g., 113000 g = 113.0 kg)
	Weight int `json:"weight"`
}

// PlayerRole defines model for Player.Role.
type PlayerRole string

// PlayerCreate defines model for PlayerCreate.
type PlayerCreate struct {
	Age         int    `json:"age"`
	Citizenship string `json:"citizenship"`

	// Height Height in millimeters (e.g., 1910 mm = 1.91 m)
	Height  int              `json:"height"`
	Name    string           `json:"name"`
	Role    PlayerCreateRole `json:"role"`
	Surname string           `json:"surname"`
	TeamId  int64            `json:"teamId"`

	// Weight Weight in grams (e.g., 86000 g = 86.0 kg)
	Weight int `json:"weight"`
}

// PlayerCreateRole defines model for PlayerCreate.Role.
type PlayerCreateRole string

// PlayerUpdate Fields to update.
type PlayerUpdate struct {
	Age         *int    `json:"age,omitempty"`
	Citizenship *string `json:"citizenship,omitempty"`

	// Height Height in millimeters (e.g., 1910 mm = 1.91 m)
	Height  *int              `json:"height,omitempty"`
	Name    *string           `json:"name,omitempty"`
	Role    *PlayerUpdateRole `json:"role,omitempty"`
	Surname *string           `json:"surname,omitempty"`
	TeamId  *int64            `json:"teamId,omitempty"`

	// Weight Weight in grams (e.g., 87000 g = 87.0 kg)
	Weight *int `json:"weight,omitempty"`
}

// PlayerUpdateRole defines model for PlayerUpdate.Role.
type PlayerUpdateRole string

// ListPlayersParams defines parameters for ListPlayers.
type ListPlayersParams struct {
	// PageNumber Page number (starts from 1)
	PageNumber *int32 `form:"page_number,omitempty" json:"page_number,omitempty"`

	// PageSize Number of items per page (maximum 100)
	PageSize *int32 `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CreatePlayerJSONRequestBody defines body for CreatePlayer for application/json ContentType.
type CreatePlayerJSONRequestBody = PlayerCreate

// UpdatePlayerJSONRequestBody defines body for UpdatePlayer for application/json ContentType.
type UpdatePlayerJSONRequestBody = PlayerUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of all players
	// (GET /players)
	ListPlayers(w http.ResponseWriter, r *http.Request, params ListPlayersParams)
	// Create a new player
	// (POST /players)
	CreatePlayer(w http.ResponseWriter, r *http.Request)
	// Delete player by ID
	// (DELETE /players/{id})
	DeletePlayer(w http.ResponseWriter, r *http.Request, id int64)
	// Get player by ID
	// (GET /players/{id})
	GetPlayer(w http.ResponseWriter, r *http.Request, id int64)
	// Update player by ID
	// (PUT /players/{id})
	UpdatePlayer(w http.ResponseWriter, r *http.Request, id int64)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get list of all players
// (GET /players)
func (_ Unimplemented) ListPlayers(w http.ResponseWriter, r *http.Request, params ListPlayersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new player
// (POST /players)
func (_ Unimplemented) CreatePlayer(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete player by ID
// (DELETE /players/{id})
func (_ Unimplemented) DeletePlayer(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get player by ID
// (GET /players/{id})
func (_ Unimplemented) GetPlayer(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update player by ID
// (PUT /players/{id})
func (_ Unimplemented) UpdatePlayer(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListPlayers operation middleware
func (siw *ServerInterfaceWrapper) ListPlayers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPlayersParams

	// ------------- Optional query parameter "page_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_number", r.URL.Query(), &params.PageNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_number", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPlayers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePlayer operation middleware
func (siw *ServerInterfaceWrapper) CreatePlayer(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePlayer(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePlayer operation middleware
func (siw *ServerInterfaceWrapper) DeletePlayer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePlayer(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPlayer operation middleware
func (siw *ServerInterfaceWrapper) GetPlayer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPlayer(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePlayer operation middleware
func (siw *ServerInterfaceWrapper) UpdatePlayer(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePlayer(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/players", wrapper.ListPlayers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/players", wrapper.CreatePlayer)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/players/{id}", wrapper.DeletePlayer)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/players/{id}", wrapper.GetPlayer)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/players/{id}", wrapper.UpdatePlayer)
	})

	return r
}

type ListPlayersRequestObject struct {
	Params ListPlayersParams
}

type ListPlayersResponseObject interface {
	VisitListPlayersResponse(w http.ResponseWriter) error
}

type ListPlayers200JSONResponse []Player

func (response ListPlayers200JSONResponse) VisitListPlayersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPlayers400Response struct {
}

func (response ListPlayers400Response) VisitListPlayersResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreatePlayerRequestObject struct {
	Body *CreatePlayerJSONRequestBody
}

type CreatePlayerResponseObject interface {
	VisitCreatePlayerResponse(w http.ResponseWriter) error
}

type CreatePlayer201JSONResponse Player

func (response CreatePlayer201JSONResponse) VisitCreatePlayerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePlayer400Response struct {
}

func (response CreatePlayer400Response) VisitCreatePlayerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeletePlayerRequestObject struct {
	Id int64 `json:"id"`
}

type DeletePlayerResponseObject interface {
	VisitDeletePlayerResponse(w http.ResponseWriter) error
}

type DeletePlayer204Response struct {
}

func (response DeletePlayer204Response) VisitDeletePlayerResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePlayer404Response struct {
}

func (response DeletePlayer404Response) VisitDeletePlayerResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetPlayerRequestObject struct {
	Id int64 `json:"id"`
}

type GetPlayerResponseObject interface {
	VisitGetPlayerResponse(w http.ResponseWriter) error
}

type GetPlayer200JSONResponse Player

func (response GetPlayer200JSONResponse) VisitGetPlayerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPlayer404Response struct {
}

func (response GetPlayer404Response) VisitGetPlayerResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdatePlayerRequestObject struct {
	Id   int64 `json:"id"`
	Body *UpdatePlayerJSONRequestBody
}

type UpdatePlayerResponseObject interface {
	VisitUpdatePlayerResponse(w http.ResponseWriter) error
}

type UpdatePlayer200JSONResponse Player

func (response UpdatePlayer200JSONResponse) VisitUpdatePlayerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePlayer400Response struct {
}

func (response UpdatePlayer400Response) VisitUpdatePlayerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePlayer404Response struct {
}

func (response UpdatePlayer404Response) VisitUpdatePlayerResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get list of all players
	// (GET /players)
	ListPlayers(ctx context.Context, request ListPlayersRequestObject) (ListPlayersResponseObject, error)
	// Create a new player
	// (POST /players)
	CreatePlayer(ctx context.Context, request CreatePlayerRequestObject) (CreatePlayerResponseObject, error)
	// Delete player by ID
	// (DELETE /players/{id})
	DeletePlayer(ctx context.Context, request DeletePlayerRequestObject) (DeletePlayerResponseObject, error)
	// Get player by ID
	// (GET /players/{id})
	GetPlayer(ctx context.Context, request GetPlayerRequestObject) (GetPlayerResponseObject, error)
	// Update player by ID
	// (PUT /players/{id})
	UpdatePlayer(ctx context.Context, request UpdatePlayerRequestObject) (UpdatePlayerResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListPlayers operation middleware
func (sh *strictHandler) ListPlayers(w http.ResponseWriter, r *http.Request, params ListPlayersParams) {
	var request ListPlayersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPlayers(ctx, request.(ListPlayersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPlayers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPlayersResponseObject); ok {
		if err := validResponse.VisitListPlayersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePlayer operation middleware
func (sh *strictHandler) CreatePlayer(w http.ResponseWriter, r *http.Request) {
	var request CreatePlayerRequestObject

	var body CreatePlayerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePlayer(ctx, request.(CreatePlayerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePlayer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePlayerResponseObject); ok {
		if err := validResponse.VisitCreatePlayerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePlayer operation middleware
func (sh *strictHandler) DeletePlayer(w http.ResponseWriter, r *http.Request, id int64) {
	var request DeletePlayerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePlayer(ctx, request.(DeletePlayerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePlayer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePlayerResponseObject); ok {
		if err := validResponse.VisitDeletePlayerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPlayer operation middleware
func (sh *strictHandler) GetPlayer(w http.ResponseWriter, r *http.Request, id int64) {
	var request GetPlayerRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPlayer(ctx, request.(GetPlayerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPlayer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPlayerResponseObject); ok {
		if err := validResponse.VisitGetPlayerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePlayer operation middleware
func (sh *strictHandler) UpdatePlayer(w http.ResponseWriter, r *http.Request, id int64) {
	var request UpdatePlayerRequestObject

	request.Id = id

	var body UpdatePlayerJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePlayer(ctx, request.(UpdatePlayerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePlayer")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePlayerResponseObject); ok {
		if err := validResponse.VisitUpdatePlayerResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX32/bNhD+Vw7cHlJAsCWnTVIDBZYma5ch24ymxR6aYGCks8SWIlmSSuoG/t+HI2U7",
	"spXlB9p0D31JZInHu/u++47HK5br2miFyjs2vmIur7Dm4XEi+QwtPRmrDVovMLznJdI//MxrI5GNt58n",
	"rOafRd3UbPwsTVgtVPyRPUuYnxlkYyaUxxItmycsF158QeUqYTr7sHcn+yxYH6MqfcXGo6W581aokqwr",
	"FGXlybBAl1thvNCKjdlv4T0IBbWQUtTo0TrYwkE5SGCU7qRQ1/ACRoN0B+onLFn5pY+doNO0L2xRdKLN",
	"EjbVtuY+rtp5yvqMFK+7YLFjfGm1YgGyRZ4taIufWU/aVsu4kaIY37PJa5awk/DnFUvYhP4csLNracUP",
	"Gxu5xm4G9Tuv0d07Jo+8PlpDJe3DZYVtH0aXNzD695LR0vJ6yWWWbadpCiW8oMdBCh/LDp3x+zWnz9K0",
	"j1ECFT81wmJBgIqCtXStMEpCrS9rbhlqt4ZbcpZ4nC196fMPmHvKMWrpwCL3eAdF7fzvFZU9z1pFZYPn",
	"2Zqi6OMdFLVZhyceTYWPoo6w5G7qOGisnX0ddYy+tTr2dhbi2NvZ1Eb4em9pfGNVvDNFq4puhq8EysKB",
	"19CEFQOW3Kab3R+6+aGbh+lmd6mb3R7d7N5VN2s1Tq+EmmqKI9fK8zyEhDUXkrJujNHW/9I6GuS6XpxC",
	"Y7Y/OYKTuIAS6qaxD06QCbz59eQt0NKptlBzxUuhSjjn7iP6cy4lEJ5ggtLc4FSdqreVcMHCWH0hCnRw",
	"8ObdIZCwOO3ubtyq3QUuha+EAk47TNE5oRWXIJGXDQ5O1ZEHLqW+dMAbX2krvmABuRQ0Y5Kc83AMJmCR",
	"F0kr7gS4KqBAiR5bP2F3IdElIFQum4KiMWhd8Fag50K65FSZauZEziVw7604bzxZXJN2AkY7QZnBFhX8",
	"k+gr4MKnUyFFSDtgc4hOlAqLAEHgNWISUo4mARisUXlwM+exdgm4XDc+hCe5p0J10UeEBJznXjgvcgcO",
	"7YXIkZggHQkflPJyhXHsifDHysv+5Igl7AKti9Sng3SQUUVog4obwcZse5AOtqk9cl+FzjhsqaLnEkPN",
	"LfklcbFj4fykXUN2lsc+xcbv1xUz4SWCaupztLDlPLfewdTqGjLSiKAlnxoMSm8r1/AS/4kWdG6EK0VU",
	"4pQ30m8Mz9ujW+Q8T9aD+jPGo6cgiAKqCyC3sNUeAJCl6X/G58QX7I9ulPaFtzhXsk4n6Av2jI5PZ7Ry",
	"8ZgapelC/6gCF9wYKfLAxvCDo4SurgUSMqKHny1O2Zj9NFzd0YbtBW3Y3s5WLYdby2ex43ShIqoJqEVJ",
	"zBP2NEbUXXekLrgUBQhlGg8F9zx0NNfUNbczNmav0YNsN7vWDqiOeenC+dG+OZsnzGjXU3dxBG6Dj2MG",
	"Ov9SF7N7QXQ7Mu2sPe8OM942ON+gJ/vKvvtYaHXtmjxH56aNlLO2ERYPZyQmCRwUXrZ09LIxT5YdYXgl",
	"inl0Rb12k6HD8H7J0FprCHKiNrNSU7g5dSG+Lqtbb8k9enm6iUUffjGFFr+bbZT2MNWNKtbQO+ycNucz",
	"ODq8oZZ7W+hr9N8XpfTxyjbW3sNgprZxB4xN04NxvBs8Oszfqim1V507NaX0OzWlOI/dryk9rDAiGrfX",
	"RrBCe9E/nhzrPIyDFyi1iWNZWMsS1lgasivvzXg4lLSu0s6P99K9lBHRrav1Hf9aTcJh7NucgFf1tohy",
	"fjb/NwAA//9fyQGsSxUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
